// Code generated by MockGen. DO NOT EDIT.
// Source: cache/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	x "github.com/yeqown/gocache/cache"
	store "github.com/yeqown/gocache/store"
)

// MockICache is a mock of ICache interface
type MockICache struct {
	ctrl     *gomock.Controller
	recorder *MockICacheMockRecorder
}

// MockICacheMockRecorder is the mock recorder for MockICache
type MockICacheMockRecorder struct {
	mock *MockICache
}

// NewMockICache creates a new mock instance
func NewMockICache(ctrl *gomock.Controller) *MockICache {
	mock := &MockICache{ctrl: ctrl}
	mock.recorder = &MockICacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockICache) EXPECT() *MockICacheMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockICache) Get(key, returnObj interface{}) (interface{}, error) {
	ret := m.ctrl.Call(m, "Get", key, returnObj)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockICacheMockRecorder) Get(key, returnObj interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockICache)(nil).Get), key, returnObj)
}

// Set mocks base method
func (m *MockICache) Set(key, object interface{}, options *store.Options) error {
	ret := m.ctrl.Call(m, "Set", key, object, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockICacheMockRecorder) Set(key, object, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockICache)(nil).Set), key, object, options)
}

// Delete mocks base method
func (m *MockICache) Delete(key interface{}) error {
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockICacheMockRecorder) Delete(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockICache)(nil).Delete), key)
}

// Invalidate mocks base method
func (m *MockICache) Invalidate(options store.InvalidateOptions) error {
	ret := m.ctrl.Call(m, "Invalidate", options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invalidate indicates an expected call of Invalidate
func (mr *MockICacheMockRecorder) Invalidate(options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invalidate", reflect.TypeOf((*MockICache)(nil).Invalidate), options)
}

// Clear mocks base method
func (m *MockICache) Clear() error {
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear
func (mr *MockICacheMockRecorder) Clear() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockICache)(nil).Clear))
}

// GetType mocks base method
func (m *MockICache) GetType() string {
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType
func (mr *MockICacheMockRecorder) GetType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockICache)(nil).GetType))
}

// GetStats mocks base method
func (m *MockICache) GetStats() *x.Stats {
	ret := m.ctrl.Call(m, "GetStats")
	ret0, _ := ret[0].(*x.Stats)
	return ret0
}

// GetStats indicates an expected call of GetStats
func (mr *MockICacheMockRecorder) GetStats() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockICache)(nil).GetStats))
}
